{"version":3,"sources":["Box.js","NewBoxForm.js","BoxList.js","App.js","serviceWorker.js","index.js"],"names":["Box","style","height","this","props","width","backgroundColor","color","onClick","removeBox","Component","NewBoxForm","state","handleChange","bind","handleSubmit","evt","setState","target","name","value","preventDefault","newBox","id","uuidv4","createBox","onSubmit","htmlFor","type","onChange","BoxList","boxes","create","filter","box","map","key","remove","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yRAqBeA,E,uKAjBP,OACI,6BACI,yBACIC,MAAO,CACHC,OAAO,GAAD,OAAKC,KAAKC,MAAMF,OAAhB,MACNG,MAAM,GAAD,OAAKF,KAAKC,MAAMC,MAAhB,MACLC,gBAAiBH,KAAKC,MAAMG,SAGpC,4BAAQC,QAASL,KAAKC,MAAMK,WAA5B,U,GAXEC,a,sBC+DHC,E,kDA5DX,WAAYP,GAAQ,IAAD,8BACf,cAAMA,IACDQ,MAAQ,CAAEV,OAAQ,GAAIG,MAAO,GAAIE,MAAO,IAC7C,EAAKM,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBAJL,E,yDAMNE,GACTb,KAAKc,SAAL,eACKD,EAAIE,OAAOC,KAAOH,EAAIE,OAAOE,U,mCAGzBJ,GACTA,EAAIK,iBACJ,IAAMC,EAAM,2BAAOnB,KAAKS,OAAZ,IAAmBW,GAAIC,gBACnCrB,KAAKC,MAAMqB,UAAUH,GACrBnB,KAAKc,SAAS,CACVf,OAAQ,GACRG,MAAO,GACPE,MAAO,O,+BAIX,OACI,0BAAMmB,SAAUvB,KAAKY,cACjB,6BACI,2BAAOY,QAAQ,UAAf,WACA,2BACIC,KAAK,OACLT,KAAK,SACLC,MAAOjB,KAAKS,MAAMV,OAClB2B,SAAU1B,KAAKU,aACfU,GAAG,YAGX,6BACI,2BAAOI,QAAQ,SAAf,UACA,2BACIC,KAAK,OACLT,KAAK,QACLC,MAAOjB,KAAKS,MAAMP,MAClBwB,SAAU1B,KAAKU,aACfU,GAAG,WAGX,6BACI,2BAAOI,QAAQ,SAAf,UACA,2BACIC,KAAK,OACLT,KAAK,QACLC,MAAOjB,KAAKS,MAAML,MAClBsB,SAAU1B,KAAKU,aACfU,GAAG,WAGX,oD,GAvDSb,aCoCVoB,E,kDAnCX,WAAY1B,GAAQ,IAAD,8BACf,cAAMA,IACDQ,MAAQ,CAACmB,MAAO,IACrB,EAAKC,OAAS,EAAKA,OAAOlB,KAAZ,gBAHC,E,mDAKZS,GACHpB,KAAKc,SAAS,CACVc,MAAO5B,KAAKS,MAAMmB,MAAME,QAAO,SAAAC,GAAG,OAAIA,EAAIX,KAAOA,S,6BAGlDD,GACHnB,KAAKc,SAAS,CACVc,MAAM,GAAD,mBAAM5B,KAAKS,MAAMmB,OAAjB,CAAwBT,Q,+BAG3B,IAAD,OACCS,EAAQ5B,KAAKS,MAAMmB,MAAMI,KAAI,SAAAD,GAAG,OAClC,kBAAC,EAAD,CACIE,IAAKF,EAAIX,GACTlB,MAAO6B,EAAI7B,MACXH,OAAQgC,EAAIhC,OACZK,MAAO2B,EAAI3B,MACXE,UAAW,kBAAM,EAAK4B,OAAOH,EAAIX,UAGzC,OACI,6BACI,sDACA,kBAAC,EAAD,CAAYE,UAAWtB,KAAK6B,SAC3BD,O,GA9BKrB,a,MCQP4B,MARf,WACE,OACE,6BACE,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0cfd87ba.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nclass Box extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div \r\n                    style={{\r\n                        height: `${this.props.height}em`,\r\n                        width: `${this.props.width}em`,\r\n                        backgroundColor: this.props.color\r\n                    }}\r\n                />\r\n                <button onClick={this.props.removeBox}>X</button>\r\n            </div>\r\n\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default Box;","import React, { Component } from 'react'\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\n\r\nclass NewBoxForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { height: \"\", width: \"\", color: \"\" };\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n    handleChange(evt) {\r\n        this.setState({\r\n            [evt.target.name]: evt.target.value\r\n        })\r\n    }\r\n    handleSubmit(evt) {\r\n        evt.preventDefault();\r\n        const newBox = {...this.state, id: uuidv4()}\r\n        this.props.createBox(newBox);\r\n        this.setState({\r\n            height: \"\", \r\n            width: \"\", \r\n            color: \"\"\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.handleSubmit}>\r\n                <div>\r\n                    <label htmlFor=\"height\">Height:</label>\r\n                    <input \r\n                        type=\"text\" \r\n                        name='height' \r\n                        value={this.state.height} \r\n                        onChange={this.handleChange}\r\n                        id='height'\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label htmlFor=\"width\">Width:</label>\r\n                    <input \r\n                        type=\"text\" \r\n                        name='width' \r\n                        value={this.state.width} \r\n                        onChange={this.handleChange}\r\n                        id='width'\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label htmlFor=\"color\">Color:</label>\r\n                    <input \r\n                        type=\"text\" \r\n                        name='color' \r\n                        value={this.state.color} \r\n                        onChange={this.handleChange}\r\n                        id='color'\r\n                    />\r\n                </div>\r\n                <button>Add New Box</button>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NewBoxForm;\r\n","import React, { Component } from 'react'\r\nimport Box from './Box';\r\nimport NewBoxForm from './NewBoxForm';\r\n\r\nclass BoxList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {boxes: []};\r\n        this.create = this.create.bind(this);\r\n    }\r\n    remove(id) {\r\n        this.setState({\r\n            boxes: this.state.boxes.filter(box => box.id !== id)\r\n        });\r\n    }\r\n    create(newBox) {\r\n        this.setState({\r\n            boxes: [...this.state.boxes, newBox]\r\n        })\r\n    }\r\n    render() {\r\n        const boxes = this.state.boxes.map(box => (\r\n            <Box \r\n                key={box.id} \r\n                width={box.width} \r\n                height={box.height} \r\n                color={box.color} \r\n                removeBox={() => this.remove(box.id)}\r\n            />\r\n        ))\r\n        return (\r\n            <div>\r\n                <h1>Color Box Maker Thingy</h1>\r\n                <NewBoxForm createBox={this.create}/>\r\n                {boxes}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default BoxList;","import React from 'react';\nimport BoxList from './BoxList';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div>\n      <BoxList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}